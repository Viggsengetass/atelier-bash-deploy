---
- name: Déploiement statique façon atelier-bash-deploy
  hosts: local
  vars_files:
    - group_vars/all.yml

  ########################################
  # 0. Vérification branche Git (control)
  ########################################
  pre_tasks:
    - name: Vérifier qu’on est sur la branche main
      delegate_to: localhost
      command: git rev-parse --abbrev-ref HEAD
      register: git_branch
      changed_when: false
      failed_when: git_branch.stdout != "main"

  ########################################
  # 1. Tâches communes
  ########################################
  tasks:
    - name: S’assurer que les répertoires existent
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ deploy_dir }}"
        - "{{ backup_dir }}"
      tags:
        - deploy

  ########################################
  # 2. Tag deploy
  ########################################
    - name: Backup de l’état courant s’il existe
      block:
        - name: Vérifier présence d’un déploiement
          stat:
            path: "{{ deploy_dir }}"
          register: deploy_dir_stat
          changed_when: false
        - name: Sauvegarder le déploiement courant
          when: deploy_dir_stat.stat.exists
          shell: |
            ts=$(date +%Y%m%d_%H%M%S)
            dest="{{ backup_dir }}/deploy_${ts}"
            mkdir -p "$dest"
            cp -r {{ deploy_dir }}/. "$dest/"
          args:
            executable: /bin/bash
      tags:
        - deploy

    - name: Copier les nouvelles sources
      copy:
        src: "../src/"
        dest: "{{ deploy_dir }}/"
        mode: preserve
      tags:
        - deploy

    - name: Journaliser la date de déploiement
      lineinfile:
        path: "{{ log_file }}"
        create: true
        line: "{{ ansible_date_time.iso8601 }} - Deployment completed"
      tags:
        - deploy

  ########################################
  # 3. Tag status
  ########################################
    - name: Afficher le statut
      when: "'status' in ansible_run_tags"
      block:
        - name: Dernier backup
          find:
            paths: "{{ backup_dir }}"
            file_type: directory
            patterns: "deploy_*"
            recurse: false
          register: backups
          changed_when: false
        - name: Affichage
          debug:
            msg: |
              Déploiement : {{ deploy_dir }}
              Fichier log : {{ log_file }}
              Dernier backup : {{ (backups.files | sort(attribute='mtime'))[-1].path if backups.files else 'Aucun' }}
      tags:
        - status

  ########################################
  # 4. Tag rollback
  ########################################
    - name: Rollback vers le dernier backup
      when: "'rollback' in ansible_run_tags"
      block:
        - name: Chercher le dernier backup
          find:
            paths: "{{ backup_dir }}"
            file_type: directory
            patterns: "deploy_*"
            recurse: false
          register: backups
        - name: Déterminer le plus récent
          set_fact:
            latest_backup: "{{ (backups.files | sort(attribute='mtime'))[-1].path if backups.files else '' }}"
        - name: Stop si aucun backup
          fail:
            msg: "Aucun backup trouvé dans {{ backup_dir }}."
          when: latest_backup == ''
        - name: Supprimer le déploiement courant
          file:
            path: "{{ deploy_dir }}"
            state: absent
        - name: Restaurer le backup
          command: >-
            cp -r {{ latest_backup }}/. {{ deploy_dir }}
      tags:
        - rollback